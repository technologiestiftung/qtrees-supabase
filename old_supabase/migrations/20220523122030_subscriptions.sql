-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
-- Type: cron
-- DROP TYPE IF EXISTS public.cron;
CREATE TYPE public.cron AS ENUM (
    '0 8 * * 0',
    '0 8 * * 1',
    '0 8 * * 2',
    '0 8 * * 3',
    '0 8 * * 4',
    '0 8 * * 5',
    '0 8 * * 6'
);

ALTER TYPE public.cron OWNER TO postgres;

-- Type: com_channel
-- DROP TYPE IF EXISTS public.com_channel;
CREATE TYPE public.com_channel AS ENUM (
    'SMS',
    'EMAIL'
);

ALTER TYPE public.com_channel OWNER TO postgres;

CREATE TABLE IF NOT EXISTS public.subscriptions (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1),
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    geom geometry NOT NULL,
    cron public.cron NOT NULL DEFAULT '0 8 * * 1' ::cron,
    profile_id uuid NOT NULL,
    CONSTRAINT subscriptions_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.subscriptions OWNER TO postgres;

GRANT ALL ON TABLE public.subscriptions TO anon;

GRANT ALL ON TABLE public.subscriptions TO authenticated;

GRANT ALL ON TABLE public.subscriptions TO postgres;

GRANT ALL ON TABLE public.subscriptions TO service_role;

CREATE TRIGGER subscriptions_moddatetime
    BEFORE UPDATE ON public.subscriptions
    FOR EACH ROW
    EXECUTE FUNCTION moddatetime ('updated_at');

REVOKE ALL ON TABLE public.profiles FROM authenticated;

REVOKE ALL ON TABLE public.profiles FROM postgres;

REVOKE ALL ON TABLE public.profiles FROM service_role;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO service_role;

GRANT ALL ON TABLE public.profiles TO postgres;

-- ALTER TABLE IF EXISTS public.profiles RENAME id TO updated_at;
ALTER TABLE public.profiles
    ALTER COLUMN updated_at TYPE timestamp with time zone;

ALTER TABLE IF EXISTS public.profiles
    ALTER COLUMN updated_at SET DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN com_channel com_channel NOT NULL DEFAULT 'EMAIL'::com_channel;

CREATE TRIGGER profiles_moddatetime
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW
    EXECUTE FUNCTION moddatetime ('updated_at');

REVOKE ALL ON TABLE public.user_roles FROM authenticated;

REVOKE ALL ON TABLE public.user_roles FROM postgres;

REVOKE ALL ON TABLE public.user_roles FROM service_role;

GRANT ALL ON TABLE public.user_roles TO authenticated;

GRANT ALL ON TABLE public.user_roles TO service_role;

GRANT ALL ON TABLE public.user_roles TO postgres;

